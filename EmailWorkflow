package au.com.cfs.winged.core.workflows;

import com.adobe.granite.workflow.WorkflowException;
import com.adobe.granite.workflow.WorkflowSession;
import com.adobe.granite.workflow.exec.WorkItem;
import com.adobe.granite.workflow.exec.WorkflowProcess;
import com.adobe.granite.workflow.metadata.MetaDataMap;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.day.cq.mailer.MessageGateway;
import com.day.cq.mailer.MessageGatewayService;
import org.apache.commons.mail.Email;
import org.apache.commons.mail.EmailException;
import org.apache.commons.mail.HtmlEmail;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import java.util.Properties;
import java.io.InputStream;
import org.apache.sling.api.resource.Resource;
import com.day.cq.dam.api.Asset;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * This method gets the email metadata from email.properties file and calls sendEmail() to trigger email
 * @throws WorkflowException
 */
@Component(service = WorkflowProcess.class,
        property = {"process.label=Email Workflow Process"})
public class EmailWorkflow implements WorkflowProcess {

  protected final Logger logger = LoggerFactory.getLogger(EmailWorkflow.class);

  private static final String ASSETPATH_EMAIL_PROPERTIES = "/content/dam/cfs-winged/documents/email/email.properties";

  @Reference
  private MessageGatewayService messageGatewayService;

  @Reference
  private ResourceResolverFactory resolverFactory;

  public void execute(WorkItem workItem, WorkflowSession wfSession,
                      MetaDataMap metaDataMap) throws WorkflowException {
    logger.info("Email Workflow Started");

    try (ResourceResolver resolver = wfSession.adaptTo(ResourceResolver.class)) {
      if (resolver == null) {
        logger.error("Resource resolver is null");
        return;
      }

      String subject = StringUtils.EMPTY;
      String body = StringUtils.EMPTY;
      String emailTo = StringUtils.EMPTY;

      Resource resource = resolver.getResource(ASSETPATH_EMAIL_PROPERTIES);
      if (resource == null) {
        logger.error("Resource for email properties not found at path: {}", ASSETPATH_EMAIL_PROPERTIES);
        return;
      }

      Asset asset = resource.adaptTo(Asset.class);
      if (asset == null) {
        logger.error("Asset could not be adapted from resource at path: {}", ASSETPATH_EMAIL_PROPERTIES);
        return;
      }

      InputStream inputStream = asset.getOriginal().getStream();
      if (inputStream == null) {
        logger.error("Input stream for email properties is null");
        return;
      }

      Properties properties = new Properties();
      properties.load(inputStream);

      subject = properties.getProperty("email.subject", StringUtils.EMPTY);
      body = properties.getProperty("email.body", StringUtils.EMPTY);
      emailTo = properties.getProperty("email.to", StringUtils.EMPTY);

      // Debugging: Log the raw body before replacements
      logger.debug("Raw email body before replacements: {}", body);

      // Get the payload path and title
      String payloadPath = workItem.getWorkflowData().getPayload().toString();
      Resource pageResource = resolver.getResource(payloadPath);

      if (pageResource != null) {
        String pageTitle = pageResource.getValueMap().get("jcr:title", String.class);
        body = StringUtils.replace(body, "${pagePath}", payloadPath);
        body = StringUtils.replace(body, "${pageTitle}", pageTitle != null ? pageTitle : "Untitled Page");

        // Debugging: Log the body after replacements
        logger.debug("Processed email body after replacements: {}", body);
      } else {
        logger.warn("Resource for payload path {} not found", payloadPath);
      }

      // Log the final subject and recipient list
      logger.info("Sending email with subject: {}", subject);
      logger.info("Recipients: {}", emailTo);

      String[] recipients = emailTo.split(";");
      sendEmail(subject, body, recipients);

    } catch (EmailException e) {
      logger.error("email exception occurred", e);
    }
    catch (Exception e) {
      logger.error("An error occurred during the email workflow process", e);
    }
  }

  /**
   * This method sets the email subject, body, recipients and sends email using the Email Configuration
   * @param subjectLine
   * @param msgBody
   * @param recipients
   * @throws EmailException
   */
  private void sendEmail(String subjectLine, String msgBody, String[] recipients) throws EmailException {
    try {
      Email email = new HtmlEmail();
      for (String recipient : recipients) {
        email.addTo(recipient.trim()); // Trim to remove any accidental spaces
      }
      email.setSubject(subjectLine);
      email.setMsg(msgBody); // Make sure this method call is appropriate for HTML emails
      MessageGateway<Email> messageGateway = messageGatewayService.getGateway(HtmlEmail.class);
      if (messageGateway != null) {
        logger.info("Sending out email");
        messageGateway.send(email);
        logger.info("Email sent successfully");
      } else {
        logger.error("The message gateway could not be retrieved.");
      }
    } catch (Exception e) {
      logger.error("An error occurred while sending the email", e);
    }
  }
}

email.subject=Notification: Page Activation Request
email.body=Dear User,<br/><br/>A request has been made to activate the page at ${pagePath}.<br/>Title: ${pageTitle}<br/><br/>Please review the page.<br/>Thank you.
email.to=venkateswara.goud.lakkasani@cfs.com.au
https://author-p110482-e1139939.adobeaemcloud.com/content/cfs-winged/au/en/Personal-alert-test.html
