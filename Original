package au.com.cfs.winged.core.workflows;

import com.adobe.granite.workflow.WorkflowException;
import com.adobe.granite.workflow.WorkflowSession;
import com.adobe.granite.workflow.exec.WorkItem;
import com.adobe.granite.workflow.exec.WorkflowProcess;
import com.adobe.granite.workflow.metadata.MetaDataMap;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.day.cq.mailer.MessageGateway;
import com.day.cq.mailer.MessageGatewayService;
import org.apache.commons.mail.Email;
import org.apache.commons.mail.EmailException;
import org.apache.commons.mail.HtmlEmail;
import org.apache.sling.api.SlingHttpServletRequest;
import org.apache.sling.api.SlingHttpServletResponse;
import org.apache.sling.api.servlets.SlingAllMethodsServlet;
import org.json.JSONException;
import org.json.JSONObject;
import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import java.util.Properties;
import java.io.InputStream;
import javax.servlet.Servlet;
import java.io.IOException;
import org.apache.sling.api.resource.Resource;
import com.day.cq.dam.api.Asset;

import static org.apache.sling.api.servlets.ServletResolverConstants.SLING_SERVLET_PATHS;

/***
 * This method gets the email metadata from email.properties file and calls sendEmail() to trigger email
 * @param workItem
 * @param wfSession
 * @param metaDataMap
 * @throws WorkflowException
 */
@Component(service = WorkflowProcess.class,
        property = {"process.label=Email Workflow Process" })
public class EmailWorkflow implements WorkflowProcess{

  protected final Logger logger = LoggerFactory.getLogger(EmailWorkflow.class);

  private static String ASSETPATH_EMAIL_PROPERTIES = "/content/dam/cfs-winged/documents/email/email.properties";

  @Reference
  private MessageGatewayService messageGatewayService;

  @Reference
  private ResourceResolverFactory resolverFactory;

  public void execute(WorkItem workItem, WorkflowSession wfSession,
                      MetaDataMap metaDataMap) throws WorkflowException {
    logger.info("Email Workflow Started");
    ResourceResolver resolver = null;
    JSONObject jsonResponse = new JSONObject();
    boolean sent = false;
    try {
      resolver = wfSession.adaptTo(ResourceResolver.class);
      String subject = StringUtils.EMPTY;
      String body = StringUtils.EMPTY;
      String emailTo = StringUtils.EMPTY;


      if(resolver != null) {
        Resource resource = resolver.getResource(ASSETPATH_EMAIL_PROPERTIES);

        if(resource != null) {
          Asset asset = resource.adaptTo(Asset.class);
          InputStream inputStream = asset.getOriginal().getStream();
          if(inputStream != null) {
            Properties properties = new Properties();
            properties.load(inputStream);
            subject = properties.getProperty("email.subject");
            logger.info("email.subject->"+subject);
            body = properties.getProperty("email.body");
            logger.info("email.body->"+body);
            emailTo = properties.getProperty("email.to");
            logger.info("email.to->"+emailTo);

          }
        }
      }



      String[] recipients = emailTo.split(";");
      sendEmail(subject,
                     body, recipients);
      sent = true;
      jsonResponse.put("result", sent ? "done" : "something went wrong");

      String payloadType = workItem.getWorkflowData().getPayloadType();

      if (StringUtils.equals(payloadType, "JCR_PATH")) {
        logger.error("Payload type: {}", payloadType);

        String path = workItem.getWorkflowData().getPayload().toString();
        logger.error("Payload path: {}", path);
      }

      String args = metaDataMap.get("PROCESS_ARGS", String.class);
      logger.error("Process args: {}", args);
    } catch (JSONException e) {
      e.printStackTrace();
    } catch (Exception e) {
      e.printStackTrace();
    }

  }

  /***
   * This method sets the email subject, body, recipients and sends email using the Email Configuration
   * @param subjectLine
   * @param msgBody
   * @param recipients
   * @throws EmailException
   */
  private void sendEmail(String subjectLine, String msgBody, String[] recipients) throws EmailException {
    try {
      Email email = new HtmlEmail();
      for (String recipient : recipients) {
        email.addTo(recipient);
      }
      email.setSubject(subjectLine);
      email.setMsg(msgBody);
      MessageGateway<Email> messageGateway = messageGatewayService.getGateway(HtmlEmail.class);
      if (messageGateway != null) {
        logger.info("Sending out email");
        messageGateway.send((Email) email);
        logger.info("Email sent successfully");
      } else {
        logger.error("The message gateway could not be retrieved.");
      }
    }
    catch (Exception e) {
      e.printStackTrace();
    }
  }
}
